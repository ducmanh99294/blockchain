// pages/Cart.js
import React, { useEffect, useState } from 'react';
import '../../assets/css/User/cart.css';
import { useNavigate } from 'react-router-dom';

const Cart: React.FC = () => {
  // D·ªØ li·ªáu m·∫´u gi·ªè h√†ng
  const [cartItems, setCartItems] = useState<any>([]);
  const [paymentMethods, setPaymentMethods] = useState<any[]>([]);
  const [shippingMethods, setShippingMethods] = useState<any[]>([]);
  const [coupon, setCoupon] = useState<any>([]);
  
  const [couponCode, setCouponCode] = useState("");
  const [appliedCoupon, setAppliedCoupon] = useState<any>(null);
  const [selectedPayment, setSelectedPayment] = useState("");
  const [selectedShipping, setSelectedShipping] = useState("");
  const API = 'http://localhost:3000'
  const userId = localStorage.getItem('userId');
  const navigate = useNavigate();

useEffect(() => {
  fetchData();
}, [userId]);

  const fetchData = async () => {
    try {
      const [cartRes, couponRes, paymentRes, shippingRes] = await Promise.all([
        fetch(`${API}/api/cart/user/${userId}`).then(res => res.json()),
        fetch(`${API}/api/coupon`).then(res => res.json()),
        fetch(`${API}/api/payment`).then(res => res.json()),
        fetch(`${API}/api/shipping`).then(res => res.json())
      ]);

      // ‚úÖ cartRes: { userId, items: [] }
      setCartItems(Array.isArray(cartRes.items) ? cartRes.items : []);
      setCoupon(Array.isArray(couponRes) ? couponRes : []);
      setPaymentMethods(Array.isArray(paymentRes) ? paymentRes : []);
      setShippingMethods(Array.isArray(shippingRes) ? shippingRes : []);
      
      if (Array.isArray(paymentRes) && paymentRes.length > 0) {
        setSelectedPayment(paymentRes[0]._id);
      }
      if (Array.isArray(shippingRes) && shippingRes.length > 0) {
        setSelectedShipping(shippingRes[0]._id);
      }
    } catch (error) {
      console.error("L·ªói t·∫£i d·ªØ li·ªáu:", error);
      // fallback tr√°nh crash UI
      setCartItems([]);
      setCoupon([]);
      setPaymentMethods([]);
      setShippingMethods([]);
    }
  };

  // T√≠nh to√°n t·ªïng ti·ªÅn
  const calculateTotals = () => {
    const subtotal = cartItems.reduce((total: any, item: any) => total + (item.productId.price * item.quantity), 0);
    
    const selectedShippingMethod = shippingMethods.find(method => method._id === selectedShipping);
    const shippingFee = selectedShippingMethod ? selectedShippingMethod.price : 0;
    
    let discount = 0;
    if (appliedCoupon) {
      if (appliedCoupon.type === 'percent') {
        discount = (subtotal * appliedCoupon.discount) / 100;
      } else if (appliedCoupon.type === 'fixed') {
        discount = appliedCoupon.discount;
      } else if (appliedCoupon.type === 'shipping') {
        discount = shippingFee;
      }
    }
    
    const total = Math.max(0, subtotal + shippingFee - discount);
    
    return { subtotal, shippingFee, discount, total };
  };

  const { subtotal, shippingFee, discount, total } = calculateTotals();

  // X·ª≠ l√Ω thay ƒë·ªïi s·ªë l∆∞·ª£ng
const handleQuantityChange = async (itemId: string, newQuantity: number) => {
  if (newQuantity < 1) return;
  try {
    const res = await fetch(`${API}/api/cart/user/${userId}/item/${itemId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ quantity: newQuantity }),
    });

    if (!res.ok) {
      console.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i:", await res.text());
      return;
    }

    const updatedItem = await res.json();

    // update l·∫°i state gi·ªè h√†ng
    setCartItems((prev: any[]) =>
      prev.map((item) =>
        item._id === itemId ? { ...item, quantity: updatedItem.quantity } : item
      )
    );
    fetchData();
  } catch (err) {
    console.log("error: ", err);
  }
};

  // X√≥a s·∫£n ph·∫©m
  const handleRemoveItem = async (itemId: any) => {
    try {
    const res = await fetch(`${API}/api/cart/user/${userId}/item/${itemId}`, {
      method: "DELETE",
    });
    if (res.ok) {
      setCartItems((prev: any[]) => prev.filter(item => item._id !== itemId));
      await fetchData();
    }
  } catch (err) {
    console.error("L·ªói khi x√≥a:", err);
  }
  };

  // √Åp d·ª•ng m√£ gi·∫£m gi√°
const handleApplyCoupon = async () => {
  try {
    const res = await fetch(`${API}/api/coupon/apply?code=${couponCode.toUpperCase()}`);
    const coupon = await res.json();

    if (!res.ok || !coupon) {
      alert("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!");
      return;
    }

    if (subtotal < coupon.minOrder) {
      alert(`ƒê∆°n h√†ng t·ªëi thi·ªÉu ${coupon.minOrder.toLocaleString()}ƒë ƒë·ªÉ √°p d·ª•ng m√£ n√†y`);
      return;
    }

    setAppliedCoupon(coupon);
    alert(`√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng: ${coupon.description}`);
  } catch (error) {
    console.error("L·ªói √°p d·ª•ng coupon:", error);
    alert("Kh√¥ng th·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°");
  }
};

  // X√≥a m√£ gi·∫£m gi√°
  const handleRemoveCoupon = async () => {
    setAppliedCoupon(null);
    setCouponCode('');
  };

  // Ti·∫øn h√†nh thanh to√°n
  const handleCheckout = () => {
    if (cartItems.length === 0) {
      alert('Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!');
      return;
    }

    // Ki·ªÉm tra thu·ªëc k√™ ƒë∆°n
    const prescriptionItems = cartItems.filter((item: any) => item.prescription);
    if (prescriptionItems.length > 0) {
      alert('ƒê∆°n h√†ng c√≥ thu·ªëc k√™ ƒë∆°n. Vui l√≤ng cung c·∫•p ƒë∆°n thu·ªëc khi thanh to√°n.');
    }

    navigate('/user/checkout');
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n
  };

  // ƒê·ªãnh d·∫°ng ti·ªÅn
  const formatPrice = (price: any) => {
    return new Intl.NumberFormat('vi-VN').format(price) + 'ƒë';
  };

  return (
    <div className="cart-page">
      {cartItems.length === 0  ? (
        <div className="cart-container">
          <div className="cart-header">
            <h1>Gi·ªè H√†ng</h1>
          </div>
          <div className="empty-cart">
            <div className="empty-icon">üõí</div>
            <h2>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</h2>
            <p>H√£y th√™m m·ªôt s·ªë s·∫£n ph·∫©m ƒë·ªÉ b·∫Øt ƒë·∫ßu mua s·∫Øm</p>
            <button 
              className="continue-shopping-btn"
              onClick={() => window.location.href = '/user/category'}
            >
              Ti·∫øp t·ª•c mua s·∫Øm
            </button>
          </div>
        </div>
   ) : (      
      <div className="cart-container">
        <div className="cart-header">
          <h1>Gi·ªè H√†ng</h1>
          <span className="cart-count">{cartItems.length} s·∫£n ph·∫©m</span>
        </div>

        <div className="cart-content">
          {/* Danh s√°ch s·∫£n ph·∫©m */}
          <div className="cart-items">
            <div className="cart-items-header">
              <span>S·∫£n ph·∫©m</span>
              <span>ƒê∆°n gi√°</span>
              <span>S·ªë l∆∞·ª£ng</span>
              <span>Th√†nh ti·ªÅn</span>
              <span>Thao t√°c</span>
            </div>

            {cartItems.map((item: any) => (
              <div key={item._id} className="cart-item">
                <div className="item-info">
                  <img src={item.productId.image} alt={item.productId.name} className="item-image" />
                  <div className="item-details">
                    <h3 className="item-name">{item.productId.name}</h3>
                    <p className="item-manufacturer">{item.productId.manufacturer}</p>
                    {item.productId.prescription && (
                      <span className="prescription-badge">C·∫ßn k√™ ƒë∆°n</span>
                    )}
                  </div>
                </div>

                <div className="item-price">
                  {item.productId.discountPrice ? (
                    <>
                      <span className="current-price">{formatPrice(item.productId.discountPrice)}</span>
                      <span className="original-price">{formatPrice(item.productId.price)}</span>
                    </>
                  ) : (
                    <span className="current-price">{formatPrice(item.productId.price)}</span>
                  )}
                </div>

                <div className="item-quantity">
                  <button 
                    className="quantity-btn"
                    onClick={() => handleQuantityChange(item.productId._id, item.quantity - 1)}
                    disabled={item.productId.quantity <= 1}
                  >
                    -
                  </button>
                  <span className="quantity-number">{item.quantity}</span>
                  <button 
                    className="quantity-btn"
                    onClick={() => handleQuantityChange(item.productId._id, item.quantity + 1)}
                    disabled={item.productId.quantity >= item.productId.stock}
                  >
                    +
                  </button>
                </div>

                <div className="item-total">
                  {formatPrice(item.productId.price * item.quantity)}
                </div>

                <div className="item-actions">
                  <button 
                    className="remove-btn"
                    onClick={() => handleRemoveItem(item.productId._id)}
                    title="X√≥a s·∫£n ph·∫©m"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
            ))}
          </div>

          {/* Thanh to√°n */}
          <div className="cart-summary">
            <div className="summary-card">
              <h3>T√≥m t·∫Øt ƒë∆°n h√†ng</h3>

              {/* M√£ gi·∫£m gi√° */}
              <div className="coupon-section">
                <h4>M√£ gi·∫£m gi√°</h4>
                {appliedCoupon ? (
                  <div className="applied-coupon">
                    <span className="coupon-code">{appliedCoupon.code}</span>
                    <span className="coupon-description">{appliedCoupon.description}</span>
                    <button 
                      className="remove-coupon-btn"
                      onClick={handleRemoveCoupon}
                    >
                      X√≥a
                    </button>
                  </div>
                ) : (
                  <div className="coupon-input">
                    <input
                      type="text"
                      placeholder="Nh·∫≠p m√£ gi·∫£m gi√°..."
                      value={couponCode}
                      onChange={(e) => setCouponCode(e.target.value)}
                      className="coupon-input-field"
                    />
                    <button 
                      className="apply-coupon-btn"
                      onClick={handleApplyCoupon}
                    >
                      √Åp d·ª•ng
                    </button>
                  </div>
                )}
              </div>



              {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
              <div className="payment-section">
                <h4>Ph∆∞∆°ng th·ª©c thanh to√°n</h4>
                <div className="payment-options">
                  {paymentMethods.map(method => (
                    <label key={method._id} className="payment-option">
                      <input
                        type="radio"
                        name="payment"
                        value={method._id}
                        checked={selectedPayment === method._id}
                        onChange={() => setSelectedPayment(method._id)}
                      />
                      <span className="payment-icon">{method.icon}</span>
                      <div className="payment-info">
                        <span className="payment-name">{method.name}</span>
                        <span className="payment-description">{method.description}</span>
                      </div>
                    </label>
                  ))}
                </div>
              </div>
              
              {/* T·ªïng ti·ªÅn */}
              <div className="totals-section">
                <div className="total-row">
                  <span>T·∫°m t√≠nh:</span>
                  <span>{formatPrice(subtotal)}</span>
                </div>
                <div className="total-row">
                  <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                  <span>{shippingFee > 0 ? formatPrice(shippingFee) : 'Mi·ªÖn ph√≠'}</span>
                </div>
                {discount > 0 && (
                  <div className="total-row discount">
                    <span>Gi·∫£m gi√°:</span>
                    <span>-{formatPrice(discount)}</span>
                  </div>
                )}
                <div className="total-row grand-total">
                  <span>T·ªïng c·ªông:</span>
                  <span>{formatPrice(total)}</span>
                </div>
              </div>

              {/* Button thanh to√°n */}
              <button 
                className="checkout-btn"
                onClick={handleCheckout}
              >
                Ti·∫øn h√†nh thanh to√°n
              </button>

              <p className="security-note">
                üîí Thanh to√°n an to√†n v·ªõi MedChain. Th√¥ng tin c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t.
              </p>
            </div>
          </div>
        </div>
      </div>
   )}
    </div>
  );
};

export default Cart;