// pages/Cart.js
import React, { useState } from 'react';
import '../../assets/css/User/cart.css';

const Cart: React.FC = () => {
  // D·ªØ li·ªáu m·∫´u gi·ªè h√†ng
  const [cartItems, setCartItems] = useState([
    {
      id: 1,
      name: "Panadol Extra",
      price: 95000,
      originalPrice: 120000,
      image: "https://via.placeholder.com/100x100/4CAF50/ffffff?text=Panadol",
      quantity: 2,
      prescription: false,
      stock: 50,
      manufacturer: "GSK"
    },
    {
      id: 2,
      name: "Vitamin C 1000mg",
      price: 150000,
      originalPrice: 180000,
      image: "https://via.placeholder.com/100x100/FF9800/ffffff?text=Vitamin+C",
      quantity: 1,
      prescription: false,
      stock: 100,
      manufacturer: "Nature's Bounty"
    },
    {
      id: 3,
      name: "Amoxicillin 500mg",
      price: 85000,
      image: "https://via.placeholder.com/100x100/9C27B0/ffffff?text=Amoxicillin",
      quantity: 1,
      prescription: true,
      stock: 25,
      manufacturer: "Pfizer"
    }
  ]);

  const [couponCode, setCouponCode] = useState('');
  const [appliedCoupon, setAppliedCoupon] = useState(null);
  const [selectedPayment, setSelectedPayment] = useState('momo');
  const [selectedShipping, setSelectedShipping] = useState('standard');

  // Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn
  const shippingMethods = [
    {
      id: 'standard',
      name: 'Giao h√†ng ti√™u chu·∫©n',
      price: 15000,
      time: '3-5 ng√†y',
      description: 'Giao h√†ng trong gi·ªù h√†nh ch√≠nh'
    },
    {
      id: 'express',
      name: 'Giao h√†ng nhanh',
      price: 30000,
      time: '1-2 ng√†y',
      description: 'Giao h√†ng h·ªèa t·ªëc'
    },
    {
      id: 'pickup',
      name: 'Nh·∫≠n t·∫°i nh√† thu·ªëc',
      price: 0,
      time: 'Ngay l·∫≠p t·ª©c',
      description: 'T·ª± ƒë·∫øn nh·∫≠n t·∫°i ƒë·ªãa ch·ªâ ch·ªâ ƒë·ªãnh'
    }
  ];

  // Ph∆∞∆°ng th·ª©c thanh to√°n
  const paymentMethods = [
    {
      id: 'momo',
      name: 'V√≠ MoMo',
      icon: 'üì±',
      description: 'Thanh to√°n qua ·ª©ng d·ª•ng MoMo'
    },
    {
      id: 'banking',
      name: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
      icon: 'üè¶',
      description: 'Chuy·ªÉn kho·∫£n qua Internet Banking'
    },
    {
      id: 'cod',
      name: 'Thanh to√°n khi nh·∫≠n h√†ng',
      icon: 'üí∞',
      description: 'Tr·∫£ ti·ªÅn m·∫∑t khi nh·∫≠n ƒë∆∞·ª£c h√†ng'
    },
    {
      id: 'visa',
      name: 'Th·∫ª Visa/Mastercard',
      icon: 'üí≥',
      description: 'Thanh to√°n b·∫±ng th·∫ª qu·ªëc t·∫ø'
    }
  ];

  // M√£ gi·∫£m gi√°
  const coupons = [
    {
      code: 'WELCOME10',
      discount: 10,
      type: 'percent',
      minOrder: 200000,
      description: 'Gi·∫£m 10% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n'
    },
    {
      code: 'FREESHIP',
      discount: 0,
      type: 'shipping',
      minOrder: 300000,
      description: 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn'
    },
    {
      code: 'MED25',
      discount: 25000,
      type: 'fixed',
      minOrder: 150000,
      description: 'Gi·∫£m 25,000ƒë cho ƒë∆°n h√†ng'
    }
  ];

  // T√≠nh to√°n t·ªïng ti·ªÅn
  const calculateTotals = () => {
    const subtotal = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
    
    const selectedShippingMethod = shippingMethods.find(method => method.id === selectedShipping);
    const shippingFee = selectedShippingMethod ? selectedShippingMethod.price : 0;
    
    let discount = 0;
    if (appliedCoupon) {
      if (appliedCoupon.type === 'percent') {
        discount = (subtotal * appliedCoupon.discount) / 100;
      } else if (appliedCoupon.type === 'fixed') {
        discount = appliedCoupon.discount;
      } else if (appliedCoupon.type === 'shipping') {
        discount = shippingFee;
      }
    }
    
    const total = Math.max(0, subtotal + shippingFee - discount);
    
    return { subtotal, shippingFee, discount, total };
  };

  const { subtotal, shippingFee, discount, total } = calculateTotals();

  // X·ª≠ l√Ω thay ƒë·ªïi s·ªë l∆∞·ª£ng
  const handleQuantityChange = (id, newQuantity) => {
    if (newQuantity < 1) return;
    
    setCartItems(cartItems.map(item =>
      item.id === id ? { ...item, quantity: Math.min(newQuantity, item.stock) } : item
    ));
  };

  // X√≥a s·∫£n ph·∫©m
  const handleRemoveItem = (id) => {
    setCartItems(cartItems.filter(item => item.id !== id));
  };

  // √Åp d·ª•ng m√£ gi·∫£m gi√°
  const handleApplyCoupon = () => {
    const coupon = coupons.find(c => c.code === couponCode.toUpperCase());
    
    if (!coupon) {
      alert('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!');
      return;
    }
    
    if (subtotal < coupon.minOrder) {
      alert(`ƒê∆°n h√†ng t·ªëi thi·ªÉu ${coupon.minOrder.toLocaleString()}ƒë ƒë·ªÉ √°p d·ª•ng m√£ n√†y`);
      return;
    }
    
    setAppliedCoupon(coupon);
    alert(`√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng: ${coupon.description}`);
  };

  // X√≥a m√£ gi·∫£m gi√°
  const handleRemoveCoupon = () => {
    setAppliedCoupon(null);
    setCouponCode('');
  };

  // Ti·∫øn h√†nh thanh to√°n
  const handleCheckout = () => {
    if (cartItems.length === 0) {
      alert('Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!');
      return;
    }

    // Ki·ªÉm tra thu·ªëc k√™ ƒë∆°n
    const prescriptionItems = cartItems.filter(item => item.prescription);
    if (prescriptionItems.length > 0) {
      alert('ƒê∆°n h√†ng c√≥ thu·ªëc k√™ ƒë∆°n. Vui l√≤ng cung c·∫•p ƒë∆°n thu·ªëc khi thanh to√°n.');
    }

    alert('Chuy·ªÉn ƒë·∫øn trang thanh to√°n...');
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n
  };

  // ƒê·ªãnh d·∫°ng ti·ªÅn
  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN').format(price) + 'ƒë';
  };

  if (cartItems.length === 0) {
    return (
      <div className="cart-page">
        <div className="cart-container">
          <div className="cart-header">
            <h1>Gi·ªè H√†ng</h1>
          </div>
          <div className="empty-cart">
            <div className="empty-icon">üõí</div>
            <h2>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</h2>
            <p>H√£y th√™m m·ªôt s·ªë s·∫£n ph·∫©m ƒë·ªÉ b·∫Øt ƒë·∫ßu mua s·∫Øm</p>
            <button 
              className="continue-shopping-btn"
              onClick={() => window.location.href = '/user/category'}
            >
              Ti·∫øp t·ª•c mua s·∫Øm
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="cart-page">
      <div className="cart-container">
        <div className="cart-header">
          <h1>Gi·ªè H√†ng</h1>
          <span className="cart-count">{cartItems.length} s·∫£n ph·∫©m</span>
        </div>

        <div className="cart-content">
          {/* Danh s√°ch s·∫£n ph·∫©m */}
          <div className="cart-items">
            <div className="cart-items-header">
              <span>S·∫£n ph·∫©m</span>
              <span>ƒê∆°n gi√°</span>
              <span>S·ªë l∆∞·ª£ng</span>
              <span>Th√†nh ti·ªÅn</span>
              <span>Thao t√°c</span>
            </div>

            {cartItems.map(item => (
              <div key={item.id} className="cart-item">
                <div className="item-info">
                  <img src={item.image} alt={item.name} className="item-image" />
                  <div className="item-details">
                    <h3 className="item-name">{item.name}</h3>
                    <p className="item-manufacturer">{item.manufacturer}</p>
                    {item.prescription && (
                      <span className="prescription-badge">C·∫ßn k√™ ƒë∆°n</span>
                    )}
                  </div>
                </div>

                <div className="item-price">
                  {item.originalPrice ? (
                    <>
                      <span className="current-price">{formatPrice(item.price)}</span>
                      <span className="original-price">{formatPrice(item.originalPrice)}</span>
                    </>
                  ) : (
                    <span className="current-price">{formatPrice(item.price)}</span>
                  )}
                </div>

                <div className="item-quantity">
                  <button 
                    className="quantity-btn"
                    onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                    disabled={item.quantity <= 1}
                  >
                    -
                  </button>
                  <span className="quantity-number">{item.quantity}</span>
                  <button 
                    className="quantity-btn"
                    onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                    disabled={item.quantity >= item.stock}
                  >
                    +
                  </button>
                </div>

                <div className="item-total">
                  {formatPrice(item.price * item.quantity)}
                </div>

                <div className="item-actions">
                  <button 
                    className="remove-btn"
                    onClick={() => handleRemoveItem(item.id)}
                    title="X√≥a s·∫£n ph·∫©m"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
            ))}
          </div>

          {/* Thanh to√°n */}
          <div className="cart-summary">
            <div className="summary-card">
              <h3>T√≥m t·∫Øt ƒë∆°n h√†ng</h3>

              {/* M√£ gi·∫£m gi√° */}
              <div className="coupon-section">
                <h4>M√£ gi·∫£m gi√°</h4>
                {appliedCoupon ? (
                  <div className="applied-coupon">
                    <span className="coupon-code">{appliedCoupon.code}</span>
                    <span className="coupon-description">{appliedCoupon.description}</span>
                    <button 
                      className="remove-coupon-btn"
                      onClick={handleRemoveCoupon}
                    >
                      X√≥a
                    </button>
                  </div>
                ) : (
                  <div className="coupon-input">
                    <input
                      type="text"
                      placeholder="Nh·∫≠p m√£ gi·∫£m gi√°..."
                      value={couponCode}
                      onChange={(e) => setCouponCode(e.target.value)}
                      className="coupon-input-field"
                    />
                    <button 
                      className="apply-coupon-btn"
                      onClick={handleApplyCoupon}
                    >
                      √Åp d·ª•ng
                    </button>
                  </div>
                )}
              </div>

              {/* Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn */}
              <div className="shipping-section">
                <h4>Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn</h4>
                <div className="shipping-options">
                  {shippingMethods.map(method => (
                    <label key={method.id} className="shipping-option">
                      <input
                        type="radio"
                        name="shipping"
                        value={method.id}
                        checked={selectedShipping === method.id}
                        onChange={() => setSelectedShipping(method.id)}
                      />
                      <div className="shipping-info">
                        <span className="shipping-name">{method.name}</span>
                        <span className="shipping-time">{method.time}</span>
                        <span className="shipping-price">
                          {method.price > 0 ? formatPrice(method.price) : 'Mi·ªÖn ph√≠'}
                        </span>
                        <span className="shipping-description">{method.description}</span>
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
              <div className="payment-section">
                <h4>Ph∆∞∆°ng th·ª©c thanh to√°n</h4>
                <div className="payment-options">
                  {paymentMethods.map(method => (
                    <label key={method.id} className="payment-option">
                      <input
                        type="radio"
                        name="payment"
                        value={method.id}
                        checked={selectedPayment === method.id}
                        onChange={() => setSelectedPayment(method.id)}
                      />
                      <span className="payment-icon">{method.icon}</span>
                      <div className="payment-info">
                        <span className="payment-name">{method.name}</span>
                        <span className="payment-description">{method.description}</span>
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              {/* T·ªïng ti·ªÅn */}
              <div className="totals-section">
                <div className="total-row">
                  <span>T·∫°m t√≠nh:</span>
                  <span>{formatPrice(subtotal)}</span>
                </div>
                <div className="total-row">
                  <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                  <span>{shippingFee > 0 ? formatPrice(shippingFee) : 'Mi·ªÖn ph√≠'}</span>
                </div>
                {discount > 0 && (
                  <div className="total-row discount">
                    <span>Gi·∫£m gi√°:</span>
                    <span>-{formatPrice(discount)}</span>
                  </div>
                )}
                <div className="total-row grand-total">
                  <span>T·ªïng c·ªông:</span>
                  <span>{formatPrice(total)}</span>
                </div>
              </div>

              {/* Button thanh to√°n */}
              <button 
                className="checkout-btn"
                onClick={handleCheckout}
              >
                Ti·∫øn h√†nh thanh to√°n
              </button>

              <p className="security-note">
                üîí Thanh to√°n an to√†n v·ªõi MedChain. Th√¥ng tin c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Cart;