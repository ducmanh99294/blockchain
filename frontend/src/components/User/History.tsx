// pages/OrderHistory.js
import React, { useEffect, useState } from 'react';
import '../../assets/css/User/history.css';

const History: React.FC = () => {
  const [orders, setOrders] = useState<any[]>([]);
  const [allOrders, setAllOrders] = useState<any[]>([]);
  const [activeFilter, setActiveFilter] = useState("all");
  const [loading, setLoading] = useState(true);
  const [selectedOrder, setSelectedOrder] = useState<any>(null);
  const [showReviewModal, setShowReviewModal] = useState(false);
  const [currentReviewProduct, setCurrentReviewProduct] = useState<any>(null);
  const [reviewRating, setReviewRating] = useState(0);
  const [reviewComment, setReviewComment] = useState('');

  const API = "http://localhost:3000";
  const userId = localStorage.getItem("userId");

  useEffect(()=>{
    if(userId) (
    fetchOrders()
    )
  }, [userId])
  
  const fetchOrders = async () => {
      try {
        const res = await fetch(`${API}/api/order/user/${userId}`);
        const data = await res.json();
        
        console.log(data)
        setAllOrders(data);
        setOrders(data);
      } catch (err) {
        console.log('err', err)
      } finally {
        setLoading(false);
      }
    }

  console.log()
  // Tr·∫°ng th√°i ƒë∆°n h√†ng
  const statusConfig: { [key: string]: { label: any; color: any; icon: any } } = {
    pending: { label: 'ƒêang x·ª≠ l√Ω', color: '#ff9800', icon: '‚è≥' },
    shipping: { label: 'ƒêang giao', color: '#2196f3', icon: 'üöö' },
    completed: { label: 'Ho√†n th√†nh', color: '#4caf50', icon: '‚úÖ' },
    cancelled: { label: 'ƒê√£ h·ªßy', color: '#f44336', icon: '‚ùå' }
  };


  // ƒê·ªãnh d·∫°ng ti·ªÅn
  const formatPrice = (price: any) => {
    return new Intl.NumberFormat('vi-VN').format(price) + 'ƒë';
  };

  // ƒê·ªãnh d·∫°ng ng√†y
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Xem chi ti·∫øt ƒë∆°n h√†ng
  const viewOrderDetails = (order: any) => {
    setSelectedOrder(order);
    console.log(order)
  };

  // ƒê√≥ng chi ti·∫øt
  const closeOrderDetails = () => {
    setSelectedOrder(null);
  };

  // Mua l·∫°i
  const reorder = (order: any) => {
    if (confirm(`B·∫°n c√≥ mu·ªën mua l·∫°i ƒë∆°n h√†ng ${order._id}?`)) {
      // ·ªû ƒë√¢y c√≥ th·ªÉ g·ªçi API addToCart
      alert("ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
    }
  };

  // M·ªü modal ƒë√°nh gi√°
  const openReviewModal = (product: any) => {
    setCurrentReviewProduct(product);
    setReviewRating(product.rating || 0);
    setReviewComment('');
    setShowReviewModal(true);
  };

  // G·ª≠i ƒë√°nh gi√°
  const submitReview = () => {
    if (reviewRating === 0) {
      alert('Vui l√≤ng ch·ªçn s·ªë sao ƒë√°nh gi√°!');
      return;
    }

    // C·∫≠p nh·∫≠t ƒë√°nh gi√°
    setOrders(orders.map(order => {
      if (order.items.some((item: any) => item._id === currentReviewProduct._id)) {
        return {
          ...order,
          items: order.items.map((item: any) =>
            item._id === currentReviewProduct._id
              ? { ...item, rating: reviewRating, reviewComment }
              : item
          )
        };
      }
      return order;
    }));

    alert('C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m!');
    setShowReviewModal(false);
  };

  // H·ªßy ƒë∆°n h√†ng (call API)
  const cancelOrder = async (orderId: string) => {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?")) return;
    try {
      await fetch(`${API}/api/order/${orderId}/cancel`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ reason: "Ng∆∞·ªùi d√πng h·ªßy" }),
      });
      setOrders((prev) =>
        prev.map((order) =>
          order._id === orderId
            ? { ...order, status: "cancelled", cancelReason: "Ng∆∞·ªùi d√πng h·ªßy" }
            : order
        )
      );
      alert("ƒê√£ h·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!");
    } catch (err) {
      console.error("L·ªói khi h·ªßy ƒë∆°n h√†ng:", err);
    }
  };

  // L·ªçc ƒë∆°n h√†ng theo tr·∫°ng th√°i
  const filterOrders = (status: string) => {
    setActiveFilter(status);
    if (status === "all") {
      setOrders(allOrders);
    } else {
      setOrders(allOrders.filter((o) => o.status === status));
    }
  };

  return (
    <div className="order-history-page">
      <div className="order-history-container">
        <div className="order-history-header">
          <h1>L·ªãch S·ª≠ ƒê∆°n H√†ng</h1>
          <p>Xem v√† qu·∫£n l√Ω c√°c ƒë∆°n h√†ng c·ªßa b·∫°n</p>
        </div>

        {/* B·ªô l·ªçc */}
        <div className="order-filters">
          <button 
            className={`filter-btn ${activeFilter === 'all' ? 'active' : ''}`} 
            onClick={() => filterOrders('all')}>
            T·∫•t c·∫£
          </button>
          <button 
            className={`filter-btn ${activeFilter === 'pending' ? 'active' : ''}`} 
            onClick={() => filterOrders('pending')}>
            ƒêang x·ª≠ l√Ω
          </button>         
          <button 
            className={`filter-btn ${activeFilter === 'shipping' ? 'active' : ''}`} 
            onClick={() => filterOrders('shipping')}>
            ƒêang giao
          </button>          
          <button 
            className={`filter-btn ${activeFilter === 'completed' ? 'active' : ''}`} 
            onClick={() => filterOrders('completed')}>
            Ho√†n th√†nh
          </button>          
          <button 
            className={`filter-btn ${activeFilter === 'cancelled' ? 'active' : ''}`} 
            onClick={() => filterOrders('cancelled')}>
            ƒê√£ h·ªßy
          </button>

        </div>
        
        {loading ? (
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>ƒêang t·∫£i s·∫£n ph·∫©m...</p>
          </div>
    ) : (
    <>
        {/* Danh s√°ch ƒë∆°n h√†ng */}
        <div className="orders-list">
          {orders.length === 0 ? (
            <div className="empty-orders">
              <div className="empty-icon">üì¶</div>
              <h3>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</h3>
              <p>H√£y mua s·∫Øm v√† quay l·∫°i xem l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa b·∫°n</p>
              <button 
                className="shop-now-btn"
                onClick={() => window.location.href = '/category'}
              >
                Mua s·∫Øm ngay
              </button>
            </div>
          ) : (
            orders.map(order => {
              const status = statusConfig[order?.status];
              return (
                <div key={order._id} className="order-card">
                  <div className="order-header">
                    <div className="order-info">
                      <span className="order-id">M√£ ƒë∆°n: {order._id}</span>
                      <span className="order-date">{formatDate(order.createdAt)}</span>
                    </div>
                    <div 
                      className="order-status"
                      style={{ color: status?.color, borderColor: status?.color }}
                    >
                      {status?.icon} {status?.label}
                    </div>
                  </div>

                  <div className="order-items-preview">
                    {order.items.slice(0, 3).map((item: any) => (
                      <div key={item._id} className="preview-item">
                        <img src={item.image} alt={item.name} />
                        <span>{item.name} √ó {item.quantity}</span>
                      </div>
                    ))}
                    {order.items.length > 3 && (
                      <div className="more-items">
                        +{order.items.length - 3} s·∫£n ph·∫©m kh√°c
                      </div>
                    )}
                  </div>

                  <div className="order-footer">
                    <div className="order-total">
                      T·ªïng ti·ªÅn: <strong>{formatPrice(order.totalPrice)}</strong>
                    </div>
                    <div className="order-actions">
                      <button 
                        className="action-btn view-details"
                        onClick={() => viewOrderDetails(order)}
                      >
                        Xem chi ti·∫øt
                      </button>
                      
                      {order.status === 'completed' && (
                        <button 
                          className="action-btn reorder"
                          onClick={() => reorder(order)}
                        >
                          Mua l·∫°i
                        </button>
                      )}
                      
                      {order.status === 'processing' && (
                        <button 
                          className="action-btn cancel"
                          onClick={() => cancelOrder(order._id)}
                        >
                          H·ªßy ƒë∆°n
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              );
            })
          )}
        </div>

        {/* Modal chi ti·∫øt ƒë∆°n h√†ng */}
        {selectedOrder && (
          <div className="modal-overlay">
            <div className="order-detail-modal">
              <div className="modal-header">
                <h2>Chi ti·∫øt ƒë∆°n h√†ng</h2>
                <button className="close-btn" onClick={closeOrderDetails}>√ó</button>
              </div>

              <div className="modal-content">
                <div className="order-summary">
                  <div className="summary-row">
                    <span>M√£ ƒë∆°n h√†ng:</span>
                    <strong>{selectedOrder._id}</strong>
                  </div>
                  <div className="summary-row">
                    <span>Ng√†y ƒë·∫∑t:</span>
                    <span>{formatDate(selectedOrder.date)}</span>
                  </div>
                  <div className="summary-row">
                    <span>Tr·∫°ng th√°i:</span>
                    <span 
                      className="status-badge"
                      style={{ color: statusConfig[selectedOrder.status].color }}
                    >
                      {statusConfig[selectedOrder.status].icon} {statusConfig[selectedOrder.status].label}
                    </span>
                  </div>
                  {selectedOrder.trackingNumber && (
                    <div className="summary-row">
                      <span>M√£ v·∫≠n ƒë∆°n:</span>
                      <span>{selectedOrder.trackingNumber}</span>
                    </div>
                  )}
                </div>

                <div className="shipping-info">
                  <h3>Th√¥ng tin giao h√†ng</h3>
                  <p><strong>{selectedOrder.shippingInfo.name}</strong></p>
                  <p>{selectedOrder.shippingInfo.phone}</p>
                  <p>{selectedOrder.shippingInfo.address}</p>
                </div>

                <div className="payment-info">
                  <h3>Ph∆∞∆°ng th·ª©c thanh to√°n</h3>
                  <p>
                    {selectedOrder.paymentMethod.name}
                  </p>
                </div>

                <div className="order-items-detail">
                  <h3>S·∫£n ph·∫©m ({selectedOrder.items.length})</h3>
                  {selectedOrder.items.map((item: any) => (
                    <div key={item._id} className="detail-item">
                      <img src={item.image} alt={item.name} />
                      <div className="item-info">
                        <h4>{item.name}</h4>
                        <p>S·ªë l∆∞·ª£ng: {item.quantity}</p>
                        <p className="item-price">{formatPrice(item.price * item.quantity)}</p>
                        
                        {selectedOrder.status === 'completed' && (
                          <div className="review-section">
                            {item.productId.rating > 0 ? (
                              <div className="existing-review">
                                <div className="rating">
                                  {'‚≠ê'.repeat(item.productId.rating)}
                                  {'‚òÜ'.repeat(5 - item.productId.rating)}
                                </div>
                                {item.reviewComment && (
                                  <p className="review-comment">"{item.reviewComment}"</p>
                                )}
                                
                              </div>
                              
                            ) : (
                              <button 
                                className="review-btn"
                                onClick={() => openReviewModal(item)}
                              >
                                ƒê√°nh gi√° s·∫£n ph·∫©m
                              </button>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>

                <div className="order-totals">
                  <div className="total-row">
                    <span>T·∫°m t√≠nh:</span>
                    <span>{formatPrice(selectedOrder.subtotal)}</span>
                  </div>
                  <div className="total-row">
                    <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                    <span>{formatPrice(selectedOrder.shippingMethod.price)}</span>
                  </div>
                  <div className="total-row grand-total">
                    <span>T·ªïng c·ªông:</span>
                    <span>{formatPrice(selectedOrder.totalPrice)}</span>
                  </div>
                </div>

                {selectedOrder.status === 'cancelled' && selectedOrder.cancelReason && (
                  <div className="cancellation-info">
                    <h3>L√Ω do h·ªßy ƒë∆°n</h3>
                    <p>{selectedOrder.cancelReason}</p>
                  </div>
                )}
              </div>

              <div className="modal-actions">
                <button className="close-modal-btn" onClick={closeOrderDetails}>
                  ƒê√≥ng
                </button>
                {selectedOrder.status === 'completed' && (
                  <button 
                    className="reorder-btn"
                    onClick={() => reorder(selectedOrder)}
                  >
                    Mua l·∫°i ƒë∆°n h√†ng
                  </button>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Modal ƒë√°nh gi√° */}
        {showReviewModal && (
          <div className="modal-overlay">
            <div className="review-modal">
              <div className="modal-header">
                <h2>ƒê√°nh gi√° s·∫£n ph·∫©m</h2>
                <button className="close-btn" onClick={() => setShowReviewModal(false)}>√ó</button>
              </div>

              <div className="modal-content">
                <div className="review-product">
                  <img src={currentReviewProduct.image} alt={currentReviewProduct.name} />
                  <h4>{currentReviewProduct.name}</h4>
                </div>

                <div className="rating-section">
                  <label>Ch·ªçn s·ªë sao:</label>
                  <div className="star-rating">
                    {[1, 2, 3, 4, 5].map(star => (
                      <span
                        key={star}
                        className={`star ${star <= reviewRating ? 'active' : ''}`}
                        onClick={() => setReviewRating(star)}
                      >
                        ‚≠ê
                      </span>
                    ))}
                  </div>
                </div>

                <div className="comment-section">
                  <label>Nh·∫≠n x√©t (t√πy ch·ªçn):</label>
                  <textarea
                    value={reviewComment}
                    onChange={(e) => setReviewComment(e.target.value)}
                    placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ s·∫£n ph·∫©m..."
                    rows={4}
                  />
                </div>
              </div>

              <div className="modal-actions">
                <button 
                  className="cancel-btn"
                  onClick={() => setShowReviewModal(false)}
                >
                  H·ªßy
                </button>
                <button 
                  className="submit-review-btn"
                  onClick={submitReview}
                >
                  G·ª≠i ƒë√°nh gi√°
                </button>
              </div>
            </div>
          </div>
        )}
    </>
      )} 

        
      </div>
    </div>
  );
};

export default History;